=========================
BaseGeometry class module
=========================

This module defines the ``BaseGeometry()`` class.
The module has two methods:
	``area(self)`` raises an exception of not implemented.
	``integer_validator(self, name, value`` validates the
		type and value of a variable passed to it.
Usage
======

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> base = BaseGeometry()
    >>> area = base.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

::

    >>> base.integer_validator("size", "size")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

::

    >>> base.integer_validator("size", 0)
    Traceback (most recent call last):
    ...
    ValueError: size must be greater than 0

::

    >>> base.integer_validator("size")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

::

    >>> base.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

    >>> base.integer_validator("size", None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

::

    >>> base.integer_validator("age", True)
    

::

    >>> base.integer_validator("size", [6])
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

::

    >>> base.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

::

    >>> base.integer_validator("size", (4,))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

::
